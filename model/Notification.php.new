<?php
require_once('Crud.php');
require_once('config/timezone_config.php');

class Notification extends Crud {
    public $table = 'notification';
    public $primaryKey = 'id';
    public $fillable = [
        'game_id',
        'writer_id', 
        'notification_type', 
        'seen_at',
        'read_at',
        'created_at',
        'message'
    ];

    public function getNotifications($order = 'DESC') {
        $writer_id = $_SESSION['writer_id'];
        $sql = "SELECT n.*, g.root_text_id, t.title as game_title, 
                wt.title as winning_title 
                FROM $this->table n
                JOIN game g ON n.game_id = g.id
                JOIN text t ON g.root_text_id = t.id
                LEFT JOIN text wt ON g.winner = wt.id
                WHERE n.writer_id = :writer_id
                ORDER BY n.created_at $order";
                
        $stmt = $this->pdo->prepare($sql);
        $stmt->bindValue(':writer_id', $writer_id);
        $stmt->execute();
        $results = $stmt->fetchAll();
        
        // Convert timestamps to UTC for consistent client-side handling
        foreach ($results as &$result) {
            if (isset($result['created_at'])) {
                $result['created_at'] = convertFromDbTimezone($result['created_at']);
            }
        }
        
        return $results;
    }

    public function getNewNotifications($lastCheck = null) {
        $writer_id = $_SESSION['writer_id'];
        $sql = "SELECT n.*, g.root_text_id, t.title as game_title, 
                wt.title as winning_title 
                FROM $this->table n
                JOIN game g ON n.game_id = g.id
                JOIN text t ON g.root_text_id = t.id
                LEFT JOIN text wt ON g.winner = wt.id
                WHERE n.writer_id = :writer_id";
                
        if ($lastCheck !== null) {
            $sql .= " AND CAST(n.created_at AS DATETIME) > CAST(:lastCheck AS DATETIME)";
            error_log("Notification::getNewNotifications - Using SQL with lastCheck: $lastCheck");
        } else {
            error_log("Notification::getNewNotifications - Using SQL without lastCheck filter");
        }
        
        $sql .= " ORDER BY n.created_at ASC";
        
        $stmt = $this->pdo->prepare($sql);
        $stmt->bindValue(':writer_id', $writer_id);
        if ($lastCheck !== null) {
            $stmt->bindValue(':lastCheck', $lastCheck);
        }
        $stmt->execute();
        $results = $stmt->fetchAll();
        
        // Convert timestamps to UTC for consistent client-side handling
        foreach ($results as &$result) {
            if (isset($result['created_at'])) {
                $result['created_at'] = convertFromDbTimezone($result['created_at']);
            }
        }
        
        return $results;
    }

    public function getUnseenNotifications($writer_id, $game_id = NULL) {
        $sql = "SELECT n.*, g.root_text_id, t.title as game_title, 
                wt.title as winning_title 
                FROM $this->table n
                JOIN game g ON n.game_id = g.id
                JOIN text t ON g.root_text_id = t.id
                LEFT JOIN text wt ON g.winner = wt.id
                WHERE n.writer_id = :writer_id AND n.seen_at IS NULL";
        
        if ($game_id !== NULL) {
            $sql .= " AND n.game_id = :game_id";
        }
        
        $stmt = $this->pdo->prepare($sql);
        $stmt->bindValue(':writer_id', $writer_id);
    
        if ($game_id !== NULL) {
            $stmt->bindValue(':game_id', $game_id);
        }
    
        $stmt->execute();
        $results = $stmt->fetchAll();
        
        // Convert timestamps to UTC for consistent client-side handling
        foreach ($results as &$result) {
            if (isset($result['created_at'])) {
                $result['created_at'] = convertFromDbTimezone($result['created_at']);
            }
        }
        
        return $results;
    }

    public function markNotificationAsSeen($user_id, $game_id) {
        $sql = "UPDATE $this->table SET seen_at = :seen_at 
                WHERE writer_id = :writer_id AND game_id = :game_id ";
        $stmt = $this->pdo->prepare($sql);
        $stmt->bindValue(':writer_id', $user_id);
        $stmt->bindValue(':game_id', $game_id);
        $stmt->bindValue(':seen_at', date('Y-m-d H:i:s'));
        $stmt->execute();
    }
}
?> 